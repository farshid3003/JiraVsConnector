<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB2RBgAdkQYAHZEGAB2RBgAdkQYAHZEGAB2RBgAdkQYAHZEGAB2RBgAdkQYAHZEGAB2RBgAdkQYAHZE
        GAB2RBgAdkQYAHZEGAB2RBgAdkQYAHZEGAB2RBgAdkQYCXZEGD52RBh6dkQYBHZEGAB2RBgAdkQYAHZE
        GAB2RBgAdkQYAHZEGAB2RBgAdkQYAHZEGAB2RBgMdkQYj3ZEGOt2RBj/dkQY/3ZEGKB2RBg0dkQYRnZE
        GAB2RBgAdkQYAHZEGAB2RBgAdkQYAHZEGAB2RBgmdkQY4nZEGP92RBjFdkQYknZEGKl2RBgWdkQYAHZE
        GGl2RBiSdkQYBnZEGAB2RBgAdkQYAHZEGAB2RBgMdkQY1XZEGOx2RBihdkQYhnZEGDd2RBgBdkQYXXZE
        GIV2RBgvdkQYcXZEGIp2RBgAdkQYAHZEGAB2RBgAdkQYcXZEGPd2RBgwdkQYNXZEGPd2RBjddkQYUXZE
        GPl2RBjddkQYD3ZEGAJ2RBi+dkQYIXZEGAB2RBgAdkQYAXZEGMx2RBiOdkQYAHZEGAB2RBiDdkQY/3ZE
        GP92RBj5dkQYPnZEGAB2RBgAdkQYc3ZEGIx2RBgAdkQYAHZEGAd2RBj/dkQYLHZEGAB2RBgAdkQYAnZE
        GNh2RBj/dkQYpnZEGAB2RBgAdkQYAHZEGDN2RBi1dkQYAHZEGAB2RBgHdkQY/3ZEGBF2RBgAdkQYAHZE
        GE52RBj+dkQY/3ZEGO52RBg5dkQYAHZEGAB2RBhXdkQY2HZEGAB2RBgAdkQYA3ZEGOF2RBgRdkQYAHZE
        GFR2RBj5dkQY/3ZEGP92RBj1dkQY8XZEGD12RBgAdkQYoXZEGK92RBgAdkQYAHZEGAB2RBiddkQYWnZE
        GFp2RBj4dkQYj3ZEGLp2RBj/dkQYqHZEGLV2RBjfdkQYSHZEGPZ2RBhmdkQYAHZEGAB2RBgAdkQYJXZE
        GNx2RBitdkQYSnZEGAB2RBhydkQY5XZEGEl2RBgBdkQYfHZEGP92RBjldkQYCXZEGAB2RBgAdkQYAHZE
        GAB2RBhKdkQYlHZEGAJ2RBgAdkQYAHZEGFx2RBgSdkQYZ3ZEGNx2RBj8dkQYPXZEGAB2RBgAdkQYAHZE
        GAB2RBgAdkQYAHZEGDp2RBh/dkQYJnZEGKZ2RBj/dkQY/XZEGP92RBjWdkQYPHZEGAB2RBgAdkQYAHZE
        GAB2RBgAdkQYAHZEGAB2RBgAdkQYBnZEGCN2RBhidkQY73ZEGJh2RBhZdkQYCHZEGAB2RBgAdkQYAHZE
        GAB2RBgAdkQYAHZEGAB2RBgAdkQYAHZEGAB2RBgAdkQYAHZEGBx2RBgAdkQYAHZEGAB2RBgAdkQYAHZE
        GAB2RBgA//8AAP//AAD4PwAA8HcAAOHbAADsmwAAzD0AAN49AADePQAA3BkAANgLAADncwAA9+cAAP4P
        AAD/PwAA//8AAA==
</value>
  </data>
</root>